# 工作流名称
name: Build and Release

# 触发工作流的事件
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # 仅在 vX.Y.Z 格式的标签上触发
  workflow_dispatch: # 允许手动触发

# 工作流执行的任务
jobs:
  build-and-release:
    # 任务运行的环境
    # ubuntu-latest 默认已包含 gcc，所以 cgo 可以正常工作，解决了 sqlite 的编译问题
    runs-on: ubuntu-latest

    permissions:
      contents: write # 必须有写权限才能创建 Release

    # 任务执行的步骤
    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      # 步骤 3: 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 使用一个最新的 LTS 版本

      # 步骤 4: 安装 JS/CSS 压缩工具
      - name: Install JS/CSS Minifiers
        run: npm install -g terser csso-cli

      # 步骤 5: 压缩 CSS 和 JS 文件
      - name: Minify CSS and JS files
        run: |
          echo "Minifying Javascript files..."
          find static -type f -name "*.js" -exec terser {} -o {} --compress --mangle \;
          echo "Minifying CSS files..."
          find static -type f -name "*.css" -exec csso {} -o {} \;

      # 步骤 6: 下载 Go 依赖项
      - name: Download Go modules
        run: go mod download

      # 步骤 7: 构建 Go 应用程序 (for Linux amd64)
      - name: Build Go application for Linux (amd64)
        run: GOOS=linux GOARCH=amd64 go build -o fileinpic .

      # 步骤 8: 打包构建产物和静态文件
      - name: Package artifact for release
        run: tar -czf fileinpic-linux-amd64.tar.gz fileinpic static

      # 步骤 9: 创建 Release 并上传构建产物
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: fileinpic-linux-amd64.tar.gz